#! /usr/bin/env python
#  -*- coding: utf-8 -*-

# GUI module generated by PAGE version 4.20
#  in conjunction with Tcl version 8.6
#    Feb 26, 2019 03:31:31 PM MST  platform: Windows NT
import test
import testcsv
import sys
global shortinterval
global longinterval
global gap
global listedanswers
global v


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import test_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    test_support.set_Tk_var()
    top = Toplevel1 (root)
    test_support.init(root, top)
    root.mainloop()

w = None

    
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    test_support.set_Tk_var()
    top = Toplevel1 (w)
    test_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class Toplevel1:
    def recordList(self):
        listedanswers = []
        listedanswers.append(self.TCombobox1_11.get())
        listedanswers.append(self.TCombobox1_11a.get())
        listedanswers.append(self.TCombobox1_11b.get())
        
        listedanswers.append(self.TCombobox1_12.get())
        listedanswers.append(self.TCombobox1_12a.get())
        listedanswers.append(self.TCombobox1_12b.get())

        listedanswers.append(self.TCombobox1_13.get())
        listedanswers.append(self.TCombobox1_13b.get())
        listedanswers.append(self.TCombobox1_13c.get())

        listedanswers.append(self.TCombobox1_14.get())
        listedanswers.append(self.TCombobox1_14a.get())
        listedanswers.append(self.TCombobox1_14b.get())

        listedanswers.append(self.TCombobox1_15.get())
        listedanswers.append(self.TCombobox1_15a.get())
        listedanswers.append(self.TCombobox1_15b.get())

        listedanswers.append(self.TCombobox1_16.get())
        listedanswers.append(self.TCombobox1_16a.get())
        listedanswers.append(self.TCombobox1_16b.get())

        listedanswers.append(self.TCombobox1_17.get())
        listedanswers.append(self.TCombobox1_17a.get())
        listedanswers.append(self.TCombobox1_17b.get())

        listedanswers.append(self.TCombobox1_18.get())
        listedanswers.append(self.TCombobox1_18a.get())
        listedanswers.append(self.TCombobox1_18b.get())

        listedanswers.append(self.TCombobox1_19.get())
        listedanswers.append(self.TCombobox1_29a.get())
        listedanswers.append(self.TCombobox1_29b.get())

        listedanswers.append(self.TCombobox1_20.get())
        listedanswers.append(self.TCombobox1_20a.get())
        listedanswers.append(self.TCombobox1_20b.get())

        listedanswers.append(self.TCombobox1_21.get())
        listedanswers.append(self.TCombobox1_21a.get())
        listedanswers.append(self.TCombobox1_21b.get())

        listedanswers.append(self.TCombobox1_22.get())
        listedanswers.append(self.TCombobox1_22a.get())
        listedanswers.append(self.TCombobox1_22b.get())

        listedanswers.append(self.TCombobox1_22ish.get())
        listedanswers.append(self.TCombobox1_22isha.get())
        listedanswers.append(self.TCombobox1_22ishb.get())

        ''' listedanswers.append(self.TCombobox1_22ishfast.get())
        listedanswers.append(self.TCombobox1_22ishfasta.get())
        listedanswers.append(self.TCombobox1_22ishfastb.get()) no pattern has no speed so taking this out'''

        listedanswers.append(self.TCombobox1_23.get())
        listedanswers.append(self.TCombobox1_23a.get())
        listedanswers.append(self.TCombobox1_23b.get())

        listedanswers.append(self.TCombobox1_24.get())
        listedanswers.append(self.TCombobox1_24a.get())
        listedanswers.append(self.TCombobox1_24b.get())

        listedanswers.append(self.TCombobox1_25.get())
        listedanswers.append(self.TCombobox1_25a.get())
        listedanswers.append(self.TCombobox1_25b.get())

        listedanswers.append(self.TCombobox1_26.get())
        listedanswers.append(self.TCombobox1_26a.get())
        listedanswers.append(self.TCombobox1_26b.get())

        listedanswers.append(self.TCombobox1_27.get())
        listedanswers.append(self.TCombobox1_27a.get())
        listedanswers.append(self.TCombobox1_27b.get())

        listedanswers.append(self.TCombobox1_28.get())
        listedanswers.append(self.TCombobox1_28a.get())
        listedanswers.append(self.TCombobox1_28b.get())

        listedanswers.append(self.TCombobox1_29.get())
        listedanswers.append(self.TCombobox1_29a.get())
        listedanswers.append(self.TCombobox1_29b.get())

        listedanswers.append(self.TCombobox1_30.get())
        listedanswers.append(self.TCombobox1_30a.get())
        listedanswers.append(self.TCombobox1_30b.get())

        listedanswers.append(self.TCombobox1_31.get())
        listedanswers.append(self.TCombobox1_31a.get())
        listedanswers.append(self.TCombobox1_31b.get())

        listedanswers.append(self.TCombobox1_32.get())
        listedanswers.append(self.TCombobox1_32a.get())
        listedanswers.append(self.TCombobox1_32b.get())

        listedanswers.append(self.TCombobox1_33.get())
        listedanswers.append(self.TCombobox1_33a.get())
        listedanswers.append(self.TCombobox1_33b.get())

        listedanswers.append(self.TCombobox1_34.get())
        listedanswers.append(self.TCombobox1_34a.get())
        listedanswers.append(self.TCombobox1_34b.get())

        print(listedanswers)
        testcsv.savefile(listedanswers)
        
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        shortinterval = 0.25
        longinterval = 1
        gap = 0.05
        listedanswers = []
        v = tk.StringVar()
        emotion_options = ['sad','angry','happy','surprised','disgust','fear','neutral']
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x450+650+150")
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        top.minsize(width=600, height=560)
        top.maxsize(width=1000, height=1000)
        
        shiftval = 0.058-0.02;
        self.Canvas0 = tk.Label(top,text = " No \n Pattern ")
        self.Canvas0.place(relx=0.05, rely=0.820-shiftval, relheight=0.118-shiftval
                , relwidth=0.088)
        
        self.Canvas1 = tk.Label(top,text = "Alternate \n Top \n Bottom")
        self.Canvas1.place(relx=0.05, rely=0.044, relheight=0.118-shiftval
                , relwidth=0.088)

        '''self.Canvas1.configure(background="#d9d9d9")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(highlightbackground="#d9d9d9")
        self.Canvas1.configure(highlightcolor="black")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief='ridge')
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")
        self.Canvas1.configure(width=53)'''

        self.Canvas1_2a = tk.Label(top,text = "Alternate \n Left \n Right")
        self.Canvas1_2a.place(relx=0.05, rely=0.2-shiftval, relheight=0.118-shiftval
                , relwidth=0.088)
        '''self.Canvas1_2.configure(background="#d9d9d9")
        self.Canvas1_2.configure(borderwidth="2")
        self.Canvas1_2.configure(highlightbackground="#d9d9d9")
        self.Canvas1_2.configure(highlightcolor="black")
        self.Canvas1_2.configure(insertbackground="black")
        self.Canvas1_2.configure(relief='ridge')
        self.Canvas1_2.configure(selectbackground="#c4c4c4")
        self.Canvas1_2.configure(selectforeground="black")
        self.Canvas1_2.configure(width=53)'''

        self.Canvas1_3a = tk.Label(top,text = "Wave \n Left")
        self.Canvas1_3a.place(relx=0.05, rely=0.356-shiftval*2, relheight=0.118-shiftval
                , relwidth=0.088)
        '''self.Canvas1_3.configure(background="#d9d9d9")
        self.Canvas1_3.configure(borderwidth="2")
        self.Canvas1_3.configure(highlightbackground="#d9d9d9")
        self.Canvas1_3.configure(highlightcolor="black")
        self.Canvas1_3.configure(insertbackground="black")
        self.Canvas1_3.configure(relief='ridge')
        self.Canvas1_3.configure(selectbackground="#c4c4c4")
        self.Canvas1_3.configure(selectforeground="black")
        self.Canvas1_3.configure(width=53)'''

        self.Canvas1_1 = tk.Label(top,text = "Wave \n Right")
        self.Canvas1_1.place(relx=0.05, rely=0.511-shiftval*3, relheight=0.118-shiftval
                , relwidth=0.088)
        '''self.Canvas1_1.configure(background="#d9d9d9")
        self.Canvas1_1.configure(borderwidth="2")
        self.Canvas1_1.configure(highlightbackground="#d9d9d9")
        self.Canvas1_1.configure(highlightcolor="black")
        self.Canvas1_1.configure(insertbackground="black")
        self.Canvas1_1.configure(relief='ridge')
        self.Canvas1_1.configure(selectbackground="#c4c4c4")
        self.Canvas1_1.configure(selectforeground="black")
        self.Canvas1_1.configure(width=53)'''

        self.Canvas1_2 = tk.Label(top,text = "Wave \n Down")
        self.Canvas1_2.place(relx=0.05, rely=0.667-shiftval*4, relheight=0.118-shiftval
                , relwidth=0.088)
        '''self.Canvas1_2.configure(background="#d9d9d9")
        self.Canvas1_2.configure(borderwidth="2")
        self.Canvas1_2.configure(highlightbackground="#d9d9d9")
        self.Canvas1_2.configure(highlightcolor="black")
        self.Canvas1_2.configure(insertbackground="black")
        self.Canvas1_2.configure(relief='ridge')
        self.Canvas1_2.configure(selectbackground="#c4c4c4")
        self.Canvas1_2.configure(selectforeground="black")
        self.Canvas1_2.configure(width=53)'''

        self.Canvas1_4 = tk.Label(top,text = "Wave \n Up")
        self.Canvas1_4.place(relx=0.05, rely=0.822-shiftval*5, relheight=0.118-shiftval
                , relwidth=0.088)
        '''self.Canvas1_4.configure(background="#d9d9d9")
        self.Canvas1_4.configure(borderwidth="2")
        self.Canvas1_4.configure(highlightbackground="#d9d9d9")
        self.Canvas1_4.configure(highlightcolor="black")
        self.Canvas1_4.configure(insertbackground="black")
        self.Canvas1_4.configure(relief='ridge')
        self.Canvas1_4.configure(selectbackground="#c4c4c4")
        self.Canvas1_4.configure(selectforeground="black")
        self.Canvas1_4.configure(width=53)'''

        self.Canvas1_3b = tk.Label(top,text = "6 Motor \n Burst")
        self.Canvas1_3b.place(relx=0.517, rely=0.044, relheight=0.118
                , relwidth=0.088)
        '''self.Canvas1_3.configure(background="#d9d9d9")
        self.Canvas1_3.configure(borderwidth="2")
        self.Canvas1_3.configure(highlightbackground="#d9d9d9")
        self.Canvas1_3.configure(highlightcolor="black")
        self.Canvas1_3.configure(insertbackground="black")
        self.Canvas1_3.configure(relief='ridge')
        self.Canvas1_3.configure(selectbackground="#c4c4c4")
        self.Canvas1_3.configure(selectforeground="black")
        self.Canvas1_3.configure(width=53)'''

        self.Canvas1_5 = tk.Label(top,text = "Spine \n Up")
        self.Canvas1_5.place(relx=0.517, rely=0.2, relheight=0.118
                , relwidth=0.088)
        '''self.Canvas1_5.configure(background="#d9d9d9")
        self.Canvas1_5.configure(borderwidth="2")
        self.Canvas1_5.configure(highlightbackground="#d9d9d9")
        self.Canvas1_5.configure(highlightcolor="black")
        self.Canvas1_5.configure(insertbackground="black")
        self.Canvas1_5.configure(relief='ridge')
        self.Canvas1_5.configure(selectbackground="#c4c4c4")
        self.Canvas1_5.configure(selectforeground="black")
        self.Canvas1_5.configure(width=53)'''

        self.Canvas1_6 = tk.Label(top,text = "Spine\n Down")
        self.Canvas1_6.place(relx=0.517, rely=0.356, relheight=0.118
                , relwidth=0.088)
        '''self.Canvas1_6.configure(background="#d9d9d9")
        self.Canvas1_6.configure(borderwidth="2")
        self.Canvas1_6.configure(highlightbackground="#d9d9d9")
        self.Canvas1_6.configure(highlightcolor="black")
        self.Canvas1_6.configure(insertbackground="black")
        self.Canvas1_6.configure(relief='ridge')
        self.Canvas1_6.configure(selectbackground="#c4c4c4")
        self.Canvas1_6.configure(selectforeground="black")
        self.Canvas1_6.configure(width=53)'''

        self.Canvas1_7 = tk.Label(top,text = "Snake \n Horizontal")
        self.Canvas1_7.place(relx=0.517, rely=0.511, relheight=0.118
                , relwidth=0.088)
        '''self.Canvas1_7.configure(background="#d9d9d9")
        self.Canvas1_7.configure(borderwidth="2")
        self.Canvas1_7.configure(highlightbackground="#d9d9d9")
        self.Canvas1_7.configure(highlightcolor="black")
        self.Canvas1_7.configure(insertbackground="black")
        self.Canvas1_7.configure(relief='ridge')
        self.Canvas1_7.configure(selectbackground="#c4c4c4")
        self.Canvas1_7.configure(selectforeground="black")
        self.Canvas1_7.configure(width=53)'''

        self.Canvas1_8 = tk.Label(top,text = "Snake \n Vertical")
        self.Canvas1_8.place(relx=0.517, rely=0.667, relheight=0.118
                , relwidth=0.088)
        '''self.Canvas1_8.configure(background="#d9d9d9")
        self.Canvas1_8.configure(borderwidth="2")
        self.Canvas1_8.configure(highlightbackground="#d9d9d9")
        self.Canvas1_8.configure(highlightcolor="black")
        self.Canvas1_8.configure(insertbackground="black")
        self.Canvas1_8.configure(relief='ridge')
        self.Canvas1_8.configure(selectbackground="#c4c4c4")
        self.Canvas1_8.configure(selectforeground="black")
        self.Canvas1_8.configure(width=53)
'''
        self.Canvas1_9 = tk.Label(top,text = "Shoulder \n Tap")
        self.Canvas1_9.place(relx=0.517, rely=0.822, relheight=0.118
                , relwidth=0.088)
        '''self.Canvas1_9.configure(background="#d9d9d9")
        self.Canvas1_9.configure(borderwidth="2")
        self.Canvas1_9.configure(highlightbackground="#d9d9d9")
        self.Canvas1_9.configure(highlightcolor="black")
        self.Canvas1_9.configure(insertbackground="black")
        self.Canvas1_9.configure(relief='ridge')
        self.Canvas1_9.configure(selectbackground="#c4c4c4")
        self.Canvas1_9.configure(selectforeground="black")
        self.Canvas1_9.configure(width=53)'''

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.167, rely=0.044, height=24, width=47)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Slow''')
        self.Button1.configure(command = lambda: test.alternatetopbottom(longinterval, gap))

        shiftvalbut = shiftval-0.02;
        
        self.Button1_1 = tk.Button(top)
        self.Button1_1.place(relx=0.167, rely=0.111-shiftvalbut, height=24, width=47)
        self.Button1_1.configure(activebackground="#d9d9d9")
        self.Button1_1.configure(activeforeground="#000000")
        self.Button1_1.configure(background="#d9d9d9")
        self.Button1_1.configure(disabledforeground="#a3a3a3")
        self.Button1_1.configure(foreground="#000000")
        self.Button1_1.configure(highlightbackground="#d9d9d9")
        self.Button1_1.configure(highlightcolor="black")
        self.Button1_1.configure(pady="0")
        self.Button1_1.configure(text='''Fast''')
        self.Button1_1.configure(command = lambda: test.alternatetopbottom(shortinterval, gap))

        self.Button1_2 = tk.Button(top)
        self.Button1_2.place(relx=0.167, rely=0.2-shiftvalbut*2, height=24, width=47)
        self.Button1_2.configure(activebackground="#d9d9d9")
        self.Button1_2.configure(activeforeground="#000000")
        self.Button1_2.configure(background="#d9d9d9")
        self.Button1_2.configure(disabledforeground="#a3a3a3")
        self.Button1_2.configure(foreground="#000000")
        self.Button1_2.configure(highlightbackground="#d9d9d9")
        self.Button1_2.configure(highlightcolor="black")
        self.Button1_2.configure(pady="0")
        self.Button1_2.configure(text='''Slow''')
        self.Button1_2.configure(command = lambda: test.alternateleftright(longinterval, gap))

        self.Button1_3 = tk.Button(top)
        self.Button1_3.place(relx=0.167, rely=0.267-shiftvalbut*3, height=24, width=47)
        self.Button1_3.configure(activebackground="#d9d9d9")
        self.Button1_3.configure(activeforeground="#000000")
        self.Button1_3.configure(background="#d9d9d9")
        self.Button1_3.configure(disabledforeground="#a3a3a3")
        self.Button1_3.configure(foreground="#000000")
        self.Button1_3.configure(highlightbackground="#d9d9d9")
        self.Button1_3.configure(highlightcolor="black")
        self.Button1_3.configure(pady="0")
        self.Button1_3.configure(text='''Fast''')
        self.Button1_3.configure(command = lambda: test.alternateleftright(shortinterval, gap))

        self.Button1_4 = tk.Button(top)
        self.Button1_4.place(relx=0.167, rely=0.356-shiftvalbut*4, height=24, width=47)
        self.Button1_4.configure(activebackground="#d9d9d9")
        self.Button1_4.configure(activeforeground="#000000")
        self.Button1_4.configure(background="#d9d9d9")
        self.Button1_4.configure(disabledforeground="#a3a3a3")
        self.Button1_4.configure(foreground="#000000")
        self.Button1_4.configure(highlightbackground="#d9d9d9")
        self.Button1_4.configure(highlightcolor="black")
        self.Button1_4.configure(pady="0")
        self.Button1_4.configure(text='''Slow''')
        self.Button1_4.configure(command = lambda: test.waveleft(longinterval, gap))

        self.Button1_5 = tk.Button(top)
        self.Button1_5.place(relx=0.167, rely=0.422-shiftvalbut*5, height=24, width=47)
        self.Button1_5.configure(activebackground="#d9d9d9")
        self.Button1_5.configure(activeforeground="#000000")
        self.Button1_5.configure(background="#d9d9d9")
        self.Button1_5.configure(disabledforeground="#a3a3a3")
        self.Button1_5.configure(foreground="#000000")
        self.Button1_5.configure(highlightbackground="#d9d9d9")
        self.Button1_5.configure(highlightcolor="black")
        self.Button1_5.configure(pady="0")
        self.Button1_5.configure(text='''Fast''')
        self.Button1_5.configure(command = lambda: test.waveleft(shortinterval, gap))

        self.Button1_6a = tk.Button(top)
        self.Button1_6a.place(relx=0.167, rely=0.511-shiftvalbut*6, height=24, width=47)
        self.Button1_6a.configure(activebackground="#d9d9d9")
        self.Button1_6a.configure(activeforeground="#000000")
        self.Button1_6a.configure(background="#d9d9d9")
        self.Button1_6a.configure(disabledforeground="#a3a3a3")
        self.Button1_6a.configure(foreground="#000000")
        self.Button1_6a.configure(highlightbackground="#d9d9d9")
        self.Button1_6a.configure(highlightcolor="black")
        self.Button1_6a.configure(pady="0")
        self.Button1_6a.configure(text='''Slow''')
        self.Button1_6a.configure(command = lambda: test.waveright(longinterval, gap))

        self.Button1_7a = tk.Button(top)
        self.Button1_7a.place(relx=0.167, rely=0.578-shiftvalbut*7, height=24, width=47)
        self.Button1_7a.configure(activebackground="#d9d9d9")
        self.Button1_7a.configure(activeforeground="#000000")
        self.Button1_7a.configure(background="#d9d9d9")
        self.Button1_7a.configure(disabledforeground="#a3a3a3")
        self.Button1_7a.configure(foreground="#000000")
        self.Button1_7a.configure(highlightbackground="#d9d9d9")
        self.Button1_7a.configure(highlightcolor="black")
        self.Button1_7a.configure(pady="0")
        self.Button1_7a.configure(text='''Fast''')
        self.Button1_7a.configure(command = lambda: test.waveright(shortinterval, gap))
        
        self.Button1_6b = tk.Button(top)
        self.Button1_6b.place(relx=0.167, rely=0.667-shiftvalbut*8, height=24, width=47)
        self.Button1_6b.configure(activebackground="#d9d9d9")
        self.Button1_6b.configure(activeforeground="#000000")
        self.Button1_6b.configure(background="#d9d9d9")
        self.Button1_6b.configure(disabledforeground="#a3a3a3")
        self.Button1_6b.configure(foreground="#000000")
        self.Button1_6b.configure(highlightbackground="#d9d9d9")
        self.Button1_6b.configure(highlightcolor="black")
        self.Button1_6b.configure(pady="0")
        self.Button1_6b.configure(text='''Slow''')
        self.Button1_6b.configure(command = lambda: test.wavedown(longinterval, gap))

        self.Button1_7b = tk.Button(top)
        self.Button1_7b.place(relx=0.167, rely=0.733-shiftvalbut*9, height=24, width=47)
        self.Button1_7b.configure(activebackground="#d9d9d9")
        self.Button1_7b.configure(activeforeground="#000000")
        self.Button1_7b.configure(background="#d9d9d9")
        self.Button1_7b.configure(disabledforeground="#a3a3a3")
        self.Button1_7b.configure(foreground="#000000")
        self.Button1_7b.configure(highlightbackground="#d9d9d9")
        self.Button1_7b.configure(highlightcolor="black")
        self.Button1_7b.configure(pady="0")
        self.Button1_7b.configure(text='''Fast''')
        self.Button1_7b.configure(command = lambda: test.wavedown(shortinterval, gap))

        self.Button1_8 = tk.Button(top)
        self.Button1_8.place(relx=0.167, rely=0.822-shiftvalbut*10, height=24, width=47)
        self.Button1_8.configure(activebackground="#d9d9d9")
        self.Button1_8.configure(activeforeground="#000000")
        self.Button1_8.configure(background="#d9d9d9")
        self.Button1_8.configure(disabledforeground="#a3a3a3")
        self.Button1_8.configure(foreground="#000000")
        self.Button1_8.configure(highlightbackground="#d9d9d9")
        self.Button1_8.configure(highlightcolor="black")
        self.Button1_8.configure(pady="0")
        self.Button1_8.configure(text='''Slow''')
        self.Button1_8.configure(command = lambda: test.waveup(longinterval, gap))

        self.Button1_9 = tk.Button(top)
        self.Button1_9.place(relx=0.167, rely=0.889-shiftvalbut*11, height=24, width=47)
        self.Button1_9.configure(activebackground="#d9d9d9")
        self.Button1_9.configure(activeforeground="#000000")
        self.Button1_9.configure(background="#d9d9d9")
        self.Button1_9.configure(disabledforeground="#a3a3a3")
        self.Button1_9.configure(foreground="#000000")
        self.Button1_9.configure(highlightbackground="#d9d9d9")
        self.Button1_9.configure(highlightcolor="black")
        self.Button1_9.configure(pady="0")
        self.Button1_9.configure(text='''Fast''')
        self.Button1_9.configure(command = lambda: test.waveup(shortinterval, gap))
        
        self.Button1_9d = tk.Button(top)
        self.Button1_9d.place(relx=0.167, rely=0.900+0.099-shiftvalbut*12, height=24, width=47)
        self.Button1_9d.configure(activebackground="#d9d9d9")
        self.Button1_9d.configure(activeforeground="#000000")
        self.Button1_9d.configure(background="#d9d9d9")
        self.Button1_9d.configure(disabledforeground="#a3a3a3")
        self.Button1_9d.configure(foreground="#000000")
        self.Button1_9d.configure(highlightbackground="#d9d9d9")
        self.Button1_9d.configure(highlightcolor="black")
        self.Button1_9d.configure(pady="0")
        self.Button1_9d.configure(text='''Slow''')
        self.Button1_9d.configure(command = lambda: test.waveup(shortinterval, gap))
        self.Button1_9de = tk.Button(top)
        self.Button1_9de.place(relx=0.167, rely=0.959+0.099-shiftvalbut*13, height=24, width=47)
        self.Button1_9de.configure(activebackground="#d9d9d9")
        self.Button1_9de.configure(activeforeground="#000000")
        self.Button1_9de.configure(background="#d9d9d9")
        self.Button1_9de.configure(disabledforeground="#a3a3a3")
        self.Button1_9de.configure(foreground="#000000")
        self.Button1_9de.configure(highlightbackground="#d9d9d9")
        self.Button1_9de.configure(highlightcolor="black")
        self.Button1_9de.configure(pady="0")
        self.Button1_9de.configure(text='''Fast''')
        self.Button1_9de.configure(command = lambda: test.waveup(shortinterval, gap))

        self.Button1_10 = tk.Button(top)
        self.Button1_10.place(relx=0.617, rely=0.044, height=24, width=47)
        self.Button1_10.configure(activebackground="#d9d9d9")
        self.Button1_10.configure(activeforeground="#000000")
        self.Button1_10.configure(background="#d9d9d9")
        self.Button1_10.configure(disabledforeground="#a3a3a3")
        self.Button1_10.configure(foreground="#000000")
        self.Button1_10.configure(highlightbackground="#d9d9d9")
        self.Button1_10.configure(highlightcolor="black")
        self.Button1_10.configure(pady="0")
        self.Button1_10.configure(text='''Slow''')
        self.Button1_10.configure(command = lambda: test.sixmotorburst(longinterval, gap))

        self.Button1_11 = tk.Button(top)
        self.Button1_11.place(relx=0.617, rely=0.111, height=24, width=47)
        self.Button1_11.configure(activebackground="#d9d9d9")
        self.Button1_11.configure(activeforeground="#000000")
        self.Button1_11.configure(background="#d9d9d9")
        self.Button1_11.configure(disabledforeground="#a3a3a3")
        self.Button1_11.configure(foreground="#000000")
        self.Button1_11.configure(highlightbackground="#d9d9d9")
        self.Button1_11.configure(highlightcolor="black")
        self.Button1_11.configure(pady="0")
        self.Button1_11.configure(text='''Fast''')
        self.Button1_11.configure(command = lambda: test.sixmotorburst(shortinterval, gap))

        self.Button1_12 = tk.Button(top)
        self.Button1_12.place(relx=0.617, rely=0.2, height=24, width=47)
        self.Button1_12.configure(activebackground="#d9d9d9")
        self.Button1_12.configure(activeforeground="#000000")
        self.Button1_12.configure(background="#d9d9d9")
        self.Button1_12.configure(disabledforeground="#a3a3a3")
        self.Button1_12.configure(foreground="#000000")
        self.Button1_12.configure(highlightbackground="#d9d9d9")
        self.Button1_12.configure(highlightcolor="black")
        self.Button1_12.configure(pady="0")
        self.Button1_12.configure(text='''Slow''')      
        self.Button1_12.configure(command = lambda: test.spineup(longinterval, gap))

        self.Button1_13 = tk.Button(top)
        self.Button1_13.place(relx=0.617, rely=0.267, height=24, width=47)
        self.Button1_13.configure(activebackground="#d9d9d9")
        self.Button1_13.configure(activeforeground="#000000")
        self.Button1_13.configure(background="#d9d9d9")
        self.Button1_13.configure(disabledforeground="#a3a3a3")
        self.Button1_13.configure(foreground="#000000")
        self.Button1_13.configure(highlightbackground="#d9d9d9")
        self.Button1_13.configure(highlightcolor="black")
        self.Button1_13.configure(pady="0")
        self.Button1_13.configure(text='''Fast''')
        self.Button1_13.configure(command = lambda: test.spineup(shortinterval, gap))

        self.Button1_14 = tk.Button(top)
        self.Button1_14.place(relx=0.617, rely=0.356, height=24, width=47)
        self.Button1_14.configure(activebackground="#d9d9d9")
        self.Button1_14.configure(activeforeground="#000000")
        self.Button1_14.configure(background="#d9d9d9")
        self.Button1_14.configure(disabledforeground="#a3a3a3")
        self.Button1_14.configure(foreground="#000000")
        self.Button1_14.configure(highlightbackground="#d9d9d9")
        self.Button1_14.configure(highlightcolor="black")
        self.Button1_14.configure(pady="0")
        self.Button1_14.configure(text='''Slow''')   
        self.Button1_14.configure(command = lambda: test.spinedown(longinterval, gap))

        self.Button1_15 = tk.Button(top)
        self.Button1_15.place(relx=0.617, rely=0.422, height=24, width=47)
        self.Button1_15.configure(activebackground="#d9d9d9")
        self.Button1_15.configure(activeforeground="#000000")
        self.Button1_15.configure(background="#d9d9d9")
        self.Button1_15.configure(disabledforeground="#a3a3a3")
        self.Button1_15.configure(foreground="#000000")
        self.Button1_15.configure(highlightbackground="#d9d9d9")
        self.Button1_15.configure(highlightcolor="black")
        self.Button1_15.configure(pady="0")
        self.Button1_15.configure(text='''Fast''')   
        self.Button1_15.configure(command = lambda: test.spinedown(shortinterval, gap))

        self.Button1_16 = tk.Button(top)
        self.Button1_16.place(relx=0.617, rely=0.511, height=24, width=47)
        self.Button1_16.configure(activebackground="#d9d9d9")
        self.Button1_16.configure(activeforeground="#000000")
        self.Button1_16.configure(background="#d9d9d9")
        self.Button1_16.configure(disabledforeground="#a3a3a3")
        self.Button1_16.configure(foreground="#000000")
        self.Button1_16.configure(highlightbackground="#d9d9d9")
        self.Button1_16.configure(highlightcolor="black")
        self.Button1_16.configure(pady="0")
        self.Button1_16.configure(text='''Slow''')   
        self.Button1_16.configure(command = lambda: test.snakehorizontal(longinterval, gap))

        self.Button1_17 = tk.Button(top)
        self.Button1_17.place(relx=0.617, rely=0.567, height=24, width=47)
        self.Button1_17.configure(activebackground="#d9d9d9")
        self.Button1_17.configure(activeforeground="#000000")
        self.Button1_17.configure(background="#d9d9d9")
        self.Button1_17.configure(disabledforeground="#a3a3a3")
        self.Button1_17.configure(foreground="#000000")
        self.Button1_17.configure(highlightbackground="#d9d9d9")
        self.Button1_17.configure(highlightcolor="black")
        self.Button1_17.configure(pady="0")
        self.Button1_17.configure(text='''Fast''')   
        self.Button1_17.configure(command = lambda: test.snakehorizontal(shortinterval, gap))

        self.Button1_18 = tk.Button(top)
        self.Button1_18.place(relx=0.617, rely=0.667, height=24, width=47)
        self.Button1_18.configure(activebackground="#d9d9d9")
        self.Button1_18.configure(activeforeground="#000000")
        self.Button1_18.configure(background="#d9d9d9")
        self.Button1_18.configure(disabledforeground="#a3a3a3")
        self.Button1_18.configure(foreground="#000000")
        self.Button1_18.configure(highlightbackground="#d9d9d9")
        self.Button1_18.configure(highlightcolor="black")
        self.Button1_18.configure(pady="0")
        self.Button1_18.configure(text='''Slow''')   
        self.Button1_18.configure(command = lambda: test.snakevertical(longinterval, gap))

        self.Button1_19 = tk.Button(top)
        self.Button1_19.place(relx=0.617, rely=0.733, height=24, width=47)
        self.Button1_19.configure(activebackground="#d9d9d9")
        self.Button1_19.configure(activeforeground="#000000")
        self.Button1_19.configure(background="#d9d9d9")
        self.Button1_19.configure(disabledforeground="#a3a3a3")
        self.Button1_19.configure(foreground="#000000")
        self.Button1_19.configure(highlightbackground="#d9d9d9")
        self.Button1_19.configure(highlightcolor="black")
        self.Button1_19.configure(pady="0")
        self.Button1_19.configure(text='''Fast''')   
        self.Button1_19.configure(command = lambda: test.snakevertical(shortinterval, gap))

        self.Button1_20 = tk.Button(top)
        self.Button1_20.place(relx=0.617, rely=0.822, height=24, width=47)
        self.Button1_20.configure(activebackground="#d9d9d9")
        self.Button1_20.configure(activeforeground="#000000")
        self.Button1_20.configure(background="#d9d9d9")
        self.Button1_20.configure(disabledforeground="#a3a3a3")
        self.Button1_20.configure(foreground="#000000")
        self.Button1_20.configure(highlightbackground="#d9d9d9")
        self.Button1_20.configure(highlightcolor="black")
        self.Button1_20.configure(pady="0")
        self.Button1_20.configure(text='''Slow''')
        self.Button1_20.configure(command = lambda: test.shouldertap(longinterval, gap))

        self.Button1_21 = tk.Button(top)
        self.Button1_21.place(relx=0.617, rely=0.889, height=24, width=47)
        self.Button1_21.configure(activebackground="#d9d9d9")
        self.Button1_21.configure(activeforeground="#000000")
        self.Button1_21.configure(background="#d9d9d9")
        self.Button1_21.configure(disabledforeground="#a3a3a3")
        self.Button1_21.configure(foreground="#000000")
        self.Button1_21.configure(highlightbackground="#d9d9d9")
        self.Button1_21.configure(highlightcolor="black")
        self.Button1_21.configure(pady="0")
        self.Button1_21.configure(text='''Fast''')
        self.Button1_21.configure(command = lambda: test.shouldertap(shortinterval, gap))

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.267, rely=0.0, height=21, width=34)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Hot''')
        
        self.Label1a = tk.Label(top)
        self.Label1a.place(relx=0.267+0.075, rely=0.0, height=21, width=34)
        self.Label1a.configure(background="#d9d9d9")
        self.Label1a.configure(disabledforeground="#a3a3a3")
        self.Label1a.configure(foreground="#000000")
        self.Label1a.configure(text='''Cold''')
        
        self.Label1b = tk.Label(top)
        self.Label1b.place(relx=0.267+0.075*2, rely=0.0, height=21, width=34)
        self.Label1b.configure(background="#d9d9d9")
        self.Label1b.configure(disabledforeground="#a3a3a3")
        self.Label1b.configure(foreground="#000000")
        self.Label1b.configure(text='''Neutral''')
        
        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.717, rely=0.0, height=21, width=34)
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''Hot''')
        
        self.Label2a = tk.Label(top)
        self.Label2a.place(relx=0.717+0.075, rely=0.0, height=21, width=34)
        self.Label2a.configure(background="#d9d9d9")
        self.Label2a.configure(disabledforeground="#a3a3a3")
        self.Label2a.configure(foreground="#000000")
        self.Label2a.configure(text='''Cold''')
        
        self.Label2b = tk.Label(top)
        self.Label2b.place(relx=0.717+0.075*2, rely=0.0, height=21, width=34)
        self.Label2b.configure(background="#d9d9d9")
        self.Label2b.configure(disabledforeground="#a3a3a3")
        self.Label2b.configure(foreground="#000000")
        self.Label2b.configure(text='''Neutral''')
        
        self.TCombobox1_11 = ttk.Combobox(top)
        self.TCombobox1_11['values'] = emotion_options
        self.TCombobox1_11.place(relx=0.267, rely=0.044, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_11.configure(textvariable=v)
        self.TCombobox1_11.configure(takefocus="")
        self.TCombobox1_11a = ttk.Combobox(top)
        self.TCombobox1_11a['values'] = emotion_options
        self.TCombobox1_11a.place(relx=0.342, rely=0.044, relheight=0.047
                , relwidth=0.075)
        self.TCombobox1_11a.configure(takefocus="")
        self.TCombobox1_11b = ttk.Combobox(top)
        self.TCombobox1_11b['values'] = emotion_options
        self.TCombobox1_11b.place(relx=0.417, rely=0.044, relheight=0.047
                , relwidth=0.075)
        self.TCombobox1_11b.configure(takefocus="")
        #self.TCombobox1_11.bind("<<ComboboxSelected>>", self.recordList)

        self.TCombobox1_12 = ttk.Combobox(top) 
        self.TCombobox1_12['values'] = emotion_options
        self.TCombobox1_12.place(relx=0.267, rely=0.111-shiftvalbut, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_12.configure(textvariable=test_support.combobox)
        self.TCombobox1_12.configure(takefocus="")   
        
        self.TCombobox1_12a = ttk.Combobox(top)
        self.TCombobox1_12a['values'] = emotion_options
        self.TCombobox1_12a.place(relx=0.267+0.075, rely=0.111-shiftvalbut, relheight=0.047
                , relwidth=0.075)
        self.TCombobox1_12a.configure(takefocus="")
        self.TCombobox1_12b = ttk.Combobox(top)
        self.TCombobox1_12b['values'] = emotion_options
        self.TCombobox1_12b.place(relx=0.417, rely=0.111-shiftvalbut, relheight=0.047
                , relwidth=0.075)
        self.TCombobox1_12b.configure(takefocus="")
        #self.TCombobox1_12.bind("<<ComboboxSelected>>", self.recordList)

        self.TCombobox1_13 = ttk.Combobox(top)
        self.TCombobox1_13['values'] = emotion_options
        self.TCombobox1_13.place(relx=0.267, rely=0.2-shiftvalbut*2, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_13.configure(textvariable=test_support.combobox)
        self.TCombobox1_13.configure(takefocus="")

        self.TCombobox1_13b = ttk.Combobox(top)
        self.TCombobox1_13b['values'] = emotion_options
        self.TCombobox1_13b.place(relx=0.267+0.075, rely=0.2-shiftvalbut*2, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_13.configure(textvariable=test_support.combobox)
        self.TCombobox1_13b.configure(takefocus="")

        self.TCombobox1_13c = ttk.Combobox(top)
        self.TCombobox1_13c['values'] = emotion_options
        self.TCombobox1_13c.place(relx=0.267+0.075*2, rely=0.2-shiftvalbut*2, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_13.configure(textvariable=test_support.combobox)
        self.TCombobox1_13c.configure(takefocus="")


        self.TCombobox1_14 = ttk.Combobox(top)
        self.TCombobox1_14['values'] = emotion_options
        self.TCombobox1_14.place(relx=0.267, rely=0.256-shiftvalbut*3, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_14.configure(#self.TComble=test_support.combobox)
        self.TCombobox1_14.configure(takefocus="")

        self.TCombobox1_14a = ttk.Combobox(top)
        self.TCombobox1_14a['values'] = emotion_options
        self.TCombobox1_14a.place(relx=0.267+0.075, rely=0.256-shiftvalbut*3, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_14.configure(#self.TComble=test_support.combobox)
        self.TCombobox1_14a.configure(takefocus="")
        self.TCombobox1_14b = ttk.Combobox(top)
        self.TCombobox1_14b['values'] = emotion_options
        self.TCombobox1_14b.place(relx=0.267+0.075*2, rely=0.256-shiftvalbut*3, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_14.configure(#self.TComble=test_support.combobox)
        self.TCombobox1_14b.configure(takefocus="")

        self.TCombobox1_15 = ttk.Combobox(top)
        self.TCombobox1_15['values'] = emotion_options
        self.TCombobox1_15.place(relx=0.267, rely=0.356-shiftvalbut*4, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_15.configure(textvariable=test_support.combobox)
        self.TCombobox1_15.configure(takefocus="")
        self.TCombobox1_15a = ttk.Combobox(top)
        self.TCombobox1_15a['values'] = emotion_options
        self.TCombobox1_15a.place(relx=0.267+0.075, rely=0.356-shiftvalbut*4, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_15.configure(textvariable=test_support.combobox)
        self.TCombobox1_15a.configure(takefocus="")
        self.TCombobox1_15b = ttk.Combobox(top)
        self.TCombobox1_15b['values'] = emotion_options
        self.TCombobox1_15b.place(relx=0.267+0.075*2, rely=0.356-shiftvalbut*4, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_15.configure(textvariable=test_support.combobox)
        self.TCombobox1_15b.configure(takefocus="")

        self.TCombobox1_16 = ttk.Combobox(top)
        self.TCombobox1_16['values'] = emotion_options
        self.TCombobox1_16.place(relx=0.267, rely=0.422-shiftvalbut*5, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_16.configure(textvariable=test_support.combobox)
        self.TCombobox1_16.configure(takefocus="")
        self.TCombobox1_16a = ttk.Combobox(top)
        self.TCombobox1_16a['values'] = emotion_options
        self.TCombobox1_16a.place(relx=0.267+0.075, rely=0.422-shiftvalbut*5, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_16.configure(textvariable=test_support.combobox)
        self.TCombobox1_16a.configure(takefocus="")
        self.TCombobox1_16b = ttk.Combobox(top)
        self.TCombobox1_16b['values'] = emotion_options
        self.TCombobox1_16b.place(relx=0.267+0.075*2, rely=0.422-shiftvalbut*5, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_16.configure(textvariable=test_support.combobox)
        self.TCombobox1_16b.configure(takefocus="")

        self.TCombobox1_17 = ttk.Combobox(top)
        self.TCombobox1_17['values'] = emotion_options
        self.TCombobox1_17.place(relx=0.267, rely=0.511-shiftvalbut*6, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_17.configure(textvariable=test_support.combobox)
        self.TCombobox1_17.configure(takefocus="")
        self.TCombobox1_17a = ttk.Combobox(top)
        self.TCombobox1_17a['values'] = emotion_options
        self.TCombobox1_17a.place(relx=0.267+0.075, rely=0.511-shiftvalbut*6, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_17.configure(textvariable=test_support.combobox)
        self.TCombobox1_17a.configure(takefocus="")
        self.TCombobox1_17b = ttk.Combobox(top)
        self.TCombobox1_17b['values'] = emotion_options
        self.TCombobox1_17b.place(relx=0.267+0.075*2, rely=0.511-shiftvalbut*6, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_17.configure(textvariable=test_support.combobox)
        self.TCombobox1_17b.configure(takefocus="")

        self.TCombobox1_18 = ttk.Combobox(top)
        self.TCombobox1_18['values'] = emotion_options
        self.TCombobox1_18.place(relx=0.267, rely=0.578-shiftvalbut*7, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_18.configure(textvariable=test_support.combobox)
        self.TCombobox1_18.configure(takefocus="")
        self.TCombobox1_18a = ttk.Combobox(top)
        self.TCombobox1_18a['values'] = emotion_options
        self.TCombobox1_18a.place(relx=0.267+0.075, rely=0.578-shiftvalbut*7, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_18.configure(textvariable=test_support.combobox)
        self.TCombobox1_18a.configure(takefocus="")
        self.TCombobox1_18b = ttk.Combobox(top)
        self.TCombobox1_18b['values'] = emotion_options
        self.TCombobox1_18b.place(relx=0.267+0.075*2, rely=0.578-shiftvalbut*7, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_18.configure(textvariable=test_support.combobox)
        self.TCombobox1_18b.configure(takefocus="")

        self.TCombobox1_19 = ttk.Combobox(top)
        self.TCombobox1_19['values'] = emotion_options
        self.TCombobox1_19.place(relx=0.267, rely=0.667-shiftvalbut*8, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_19.configure(textvariable=test_support.combobox)
        self.TCombobox1_19.configure(takefocus="")
        self.TCombobox1_19a = ttk.Combobox(top)
        self.TCombobox1_19a['values'] = emotion_options
        self.TCombobox1_19a.place(relx=0.267+0.075, rely=0.667-shiftvalbut*8, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_19.configure(textvariable=test_support.combobox)
        self.TCombobox1_19a.configure(takefocus="")
        self.TCombobox1_19b = ttk.Combobox(top)
        self.TCombobox1_19b['values'] = emotion_options
        self.TCombobox1_19b.place(relx=0.267+0.075*2, rely=0.667-shiftvalbut*8, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_19.configure(textvariable=test_support.combobox)
        self.TCombobox1_19b.configure(takefocus="")

        self.TCombobox1_20 = ttk.Combobox(top)
        self.TCombobox1_20['values'] = emotion_options
        self.TCombobox1_20.place(relx=0.267, rely=0.733-shiftvalbut*9, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_20.configure(textvariable=test_support.combobox)
        self.TCombobox1_20.configure(takefocus="")
        self.TCombobox1_20a = ttk.Combobox(top)
        self.TCombobox1_20a['values'] = emotion_options
        self.TCombobox1_20a.place(relx=0.267+0.075, rely=0.733-shiftvalbut*9, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_20.configure(textvariable=test_support.combobox)
        self.TCombobox1_20a.configure(takefocus="")
        self.TCombobox1_20b = ttk.Combobox(top)
        self.TCombobox1_20b['values'] = emotion_options
        self.TCombobox1_20b.place(relx=0.267+0.075*2, rely=0.733-shiftvalbut*9, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_20.configure(textvariable=test_support.combobox)
        self.TCombobox1_20b.configure(takefocus="")

        self.TCombobox1_21 = ttk.Combobox(top)
        self.TCombobox1_21['values'] = emotion_options
        self.TCombobox1_21.place(relx=0.267, rely=0.822-shiftvalbut*10, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_21.configure(textvariable=test_support.combobox)
        self.TCombobox1_21.configure(takefocus="")
        self.TCombobox1_21a = ttk.Combobox(top)
        self.TCombobox1_21a['values'] = emotion_options
        self.TCombobox1_21a.place(relx=0.267+0.075, rely=0.822-shiftvalbut*10, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_21.configure(textvariable=test_support.combobox)
        self.TCombobox1_21a.configure(takefocus="")
        self.TCombobox1_21b = ttk.Combobox(top)
        self.TCombobox1_21b['values'] = emotion_options
        self.TCombobox1_21b.place(relx=0.267+0.075*2, rely=0.822-shiftvalbut*10, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_21.configure(textvariable=test_support.combobox)
        self.TCombobox1_21b.configure(takefocus="")

        self.TCombobox1_22 = ttk.Combobox(top)
        self.TCombobox1_22['values'] = emotion_options
        self.TCombobox1_22.place(relx=0.267, rely=0.889-shiftvalbut*11, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_22.configure(textvariable=test_support.combobox)
        self.TCombobox1_22.configure(takefocus="")
        self.TCombobox1_22a = ttk.Combobox(top)
        self.TCombobox1_22a['values'] = emotion_options
        self.TCombobox1_22a.place(relx=0.267+0.075, rely=0.889-shiftvalbut*11, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_22.configure(textvariable=test_support.combobox)
        self.TCombobox1_22a.configure(takefocus="")
        self.TCombobox1_22b = ttk.Combobox(top)
        self.TCombobox1_22b['values'] = emotion_options
        self.TCombobox1_22b.place(relx=0.267+0.075*2, rely=0.889-shiftvalbut*11, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_22.configure(textvariable=test_support.combobox)
        self.TCombobox1_22b.configure(takefocus="")


        self.TCombobox1_22ish = ttk.Combobox(top)
        self.TCombobox1_22ish['values'] = emotion_options
        self.TCombobox1_22ish.place(relx=0.267, rely=0.889+0.099-shiftvalbut*12, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_22.configure(textvariable=test_support.combobox)
        self.TCombobox1_22ish.configure(takefocus="")
        self.TCombobox1_22isha = ttk.Combobox(top)
        self.TCombobox1_22isha['values'] = emotion_options
        self.TCombobox1_22isha.place(relx=0.267+0.075, rely=0.889+0.099-shiftvalbut*12, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_22.configure(textvariable=test_support.combobox)
        self.TCombobox1_22isha.configure(takefocus="")
        self.TCombobox1_22ishb = ttk.Combobox(top)
        self.TCombobox1_22ishb['values'] = emotion_options
        self.TCombobox1_22ishb.place(relx=0.267+0.075*2, rely=0.889+0.099-shiftvalbut*12, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_22.configure(textvariable=test_support.combobox)+0.099
        self.TCombobox1_22ishb.configure(takefocus="")


        self.TCombobox1_22ishfast = ttk.Combobox(top)
        self.TCombobox1_22ishfast['values'] = emotion_options
        self.TCombobox1_22ishfast.place(relx=0.267, rely=0.889+0.099+0.055-shiftvalbut*12, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_22.configure(textvariable=test_support.combobox)
        self.TCombobox1_22ishfast.configure(takefocus="")
        self.TCombobox1_22ishfasta = ttk.Combobox(top)
        self.TCombobox1_22ishfasta['values'] = emotion_options
        self.TCombobox1_22ishfasta.place(relx=0.267+0.075, rely=0.889+0.099+0.055-shiftvalbut*12, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_22.configure(textvariable=test_support.combobox)
        self.TCombobox1_22ishfasta.configure(takefocus="")
        self.TCombobox1_22ishfastb = ttk.Combobox(top)
        self.TCombobox1_22ishfastb['values'] = emotion_options
        self.TCombobox1_22ishfastb.place(relx=0.267+0.075*2, rely=0.889+0.099+0.055-shiftvalbut*12, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_22.configure(textvariable=test_support.combobox)+0.099
        self.TCombobox1_22ishfastb.configure(takefocus="")


        self.TCombobox1_23 = ttk.Combobox(top)
        self.TCombobox1_23['values'] = emotion_options
        self.TCombobox1_23.place(relx=0.717, rely=0.044, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_23.configure(textvariable=test_support.combobox)
        self.TCombobox1_23.configure(takefocus="")
        self.TCombobox1_23a = ttk.Combobox(top)
        self.TCombobox1_23a['values'] = emotion_options
        self.TCombobox1_23a.place(relx=0.717+0.075, rely=0.044, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_23.configure(textvariable=test_support.combobox)
        self.TCombobox1_23a.configure(takefocus="")
        self.TCombobox1_23b = ttk.Combobox(top)
        self.TCombobox1_23b['values'] = emotion_options
        self.TCombobox1_23b.place(relx=0.717+0.075+0.075, rely=0.044, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_23.configure(textvariable=test_support.combobox)
        self.TCombobox1_23b.configure(takefocus="")

        self.TCombobox1_24 = ttk.Combobox(top)
        self.TCombobox1_24['values'] = emotion_options
        self.TCombobox1_24.place(relx=0.717, rely=0.111, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_24.configure(textvariable=test_support.combobox)
        self.TCombobox1_24.configure(takefocus="")
        self.TCombobox1_24a = ttk.Combobox(top)
        self.TCombobox1_24a['values'] = emotion_options
        self.TCombobox1_24a.place(relx=0.717+0.075, rely=0.111, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_24.configure(textvariable=test_support.combobox)
        self.TCombobox1_24a.configure(takefocus="")
        self.TCombobox1_24b = ttk.Combobox(top)
        self.TCombobox1_24b['values'] = emotion_options
        self.TCombobox1_24b.place(relx=0.717+0.075+0.075, rely=0.111, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_24.configure(textvariable=test_support.combobox)
        self.TCombobox1_24b.configure(takefocus="")

        
        self.TCombobox1_25 = ttk.Combobox(top)
        self.TCombobox1_25['values'] = emotion_options
        self.TCombobox1_25.place(relx=0.717, rely=0.2, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_25.configure(textvariable=test_support.combobox)
        self.TCombobox1_25.configure(takefocus="")
        self.TCombobox1_25a = ttk.Combobox(top)
        self.TCombobox1_25a['values'] = emotion_options
        self.TCombobox1_25a.place(relx=0.717+0.075, rely=0.2, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_25.configure(textvariable=test_support.combobox)
        self.TCombobox1_25a.configure(takefocus="")
        self.TCombobox1_25b = ttk.Combobox(top)
        self.TCombobox1_25b['values'] = emotion_options
        self.TCombobox1_25b.place(relx=0.717+0.075+0.075, rely=0.2, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_25.configure(textvariable=test_support.combobox)
        self.TCombobox1_25b.configure(takefocus="")

       
        self.TCombobox1_26 = ttk.Combobox(top)
        self.TCombobox1_26['values'] = emotion_options
        self.TCombobox1_26.place(relx=0.717, rely=0.267, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_26.configure(textvariable=test_support.combobox)
        self.TCombobox1_26.configure(takefocus="")
        self.TCombobox1_26a = ttk.Combobox(top)
        self.TCombobox1_26a['values'] = emotion_options
        self.TCombobox1_26a.place(relx=0.717+0.075, rely=0.267, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_26.configure(textvariable=test_support.combobox)
        self.TCombobox1_26a.configure(takefocus="")
        self.TCombobox1_26b = ttk.Combobox(top)
        self.TCombobox1_26b['values'] = emotion_options
        self.TCombobox1_26b.place(relx=0.717+0.075+0.075, rely=0.267, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_26.configure(textvariable=test_support.combobox)
        self.TCombobox1_26b.configure(takefocus="")

       
        self.TCombobox1_27 = ttk.Combobox(top)
        self.TCombobox1_27['values'] = emotion_options
        self.TCombobox1_27.place(relx=0.717, rely=0.356, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_27.configure(textvariable=test_support.combobox)
        self.TCombobox1_27.configure(takefocus="")
        self.TCombobox1_27a = ttk.Combobox(top)
        self.TCombobox1_27a['values'] = emotion_options
        self.TCombobox1_27a.place(relx=0.717+0.075, rely=0.356, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_27.configure(textvariable=test_support.combobox)
        self.TCombobox1_27a.configure(takefocus="")
        self.TCombobox1_27b = ttk.Combobox(top)
        self.TCombobox1_27b['values'] = emotion_options
        self.TCombobox1_27b.place(relx=0.717+0.075+0.075, rely=0.356, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_27.configure(textvariable=test_support.combobox)
        self.TCombobox1_27b.configure(takefocus="")

       
        self.TCombobox1_28 = ttk.Combobox(top)
        self.TCombobox1_28['values'] = emotion_options
        self.TCombobox1_28.place(relx=0.717, rely=0.422, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_28.configure(textvariable=test_support.combobox)
        self.TCombobox1_28.configure(takefocus="")
        self.TCombobox1_28a = ttk.Combobox(top)
        self.TCombobox1_28a['values'] = emotion_options
        self.TCombobox1_28a.place(relx=0.717+0.075, rely=0.422, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_28.configure(textvariable=test_support.combobox)
        self.TCombobox1_28a.configure(takefocus="")
        self.TCombobox1_28b = ttk.Combobox(top)
        self.TCombobox1_28b['values'] = emotion_options
        self.TCombobox1_28b.place(relx=0.717+0.075+0.075, rely=0.422, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_28.configure(textvariable=test_support.combobox)
        self.TCombobox1_28b.configure(takefocus="")

        self.TCombobox1_29 = ttk.Combobox(top)
        self.TCombobox1_29['values'] = emotion_options
        self.TCombobox1_29.place(relx=0.717, rely=0.511, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_29.configure(textvariable=test_support.combobox)
        self.TCombobox1_29.configure(takefocus="")
        self.TCombobox1_29a = ttk.Combobox(top)
        self.TCombobox1_29a['values'] = emotion_options
        self.TCombobox1_29a.place(relx=0.717+0.075, rely=0.511, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_29.configure(textvariable=test_support.combobox)
        self.TCombobox1_29a.configure(takefocus="")
        self.TCombobox1_29b = ttk.Combobox(top)
        self.TCombobox1_29b['values'] = emotion_options
        self.TCombobox1_29b.place(relx=0.717+0.075+0.075, rely=0.511, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_29.configure(textvariable=test_support.combobox)
        self.TCombobox1_29b.configure(takefocus="")

        self.TCombobox1_30 = ttk.Combobox(top)
        self.TCombobox1_30['values'] = emotion_options
        self.TCombobox1_30.place(relx=0.717, rely=0.578, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_30.configure(textvariable=test_support.combobox)
        self.TCombobox1_30.configure(takefocus="")
        self.TCombobox1_30a = ttk.Combobox(top)
        self.TCombobox1_30a['values'] = emotion_options
        self.TCombobox1_30a.place(relx=0.717+0.075, rely=0.578, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_30.configure(textvariable=test_support.combobox)
        self.TCombobox1_30a.configure(takefocus="")
        self.TCombobox1_30b = ttk.Combobox(top)
        self.TCombobox1_30b['values'] = emotion_options
        self.TCombobox1_30b.place(relx=0.717+0.075+0.075, rely=0.578, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_30.configure(textvariable=test_support.combobox)
        self.TCombobox1_30b.configure(takefocus="")

        self.TCombobox1_31 = ttk.Combobox(top)
        self.TCombobox1_31['values'] = emotion_options
        self.TCombobox1_31.place(relx=0.717, rely=0.667, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_31.configure(textvariable=test_support.combobox)
        self.TCombobox1_31.configure(takefocus="")
        self.TCombobox1_31a = ttk.Combobox(top)
        self.TCombobox1_31a['values'] = emotion_options
        self.TCombobox1_31a.place(relx=0.717+0.075, rely=0.667, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_31.configure(textvariable=test_support.combobox)
        self.TCombobox1_31a.configure(takefocus="")
        self.TCombobox1_31b = ttk.Combobox(top)
        self.TCombobox1_31b['values'] = emotion_options
        self.TCombobox1_31b.place(relx=0.717+0.075+0.075, rely=0.667, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_31.configure(textvariable=test_support.combobox)
        self.TCombobox1_31b.configure(takefocus="")

        self.TCombobox1_32 = ttk.Combobox(top)
        self.TCombobox1_32['values'] = emotion_options
        self.TCombobox1_32.place(relx=0.717, rely=0.733, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_32.configure(textvariable=test_support.combobox)
        self.TCombobox1_32.configure(takefocus="")
        self.TCombobox1_32a = ttk.Combobox(top)
        self.TCombobox1_32a['values'] = emotion_options
        self.TCombobox1_32a.place(relx=0.717+0.075, rely=0.733, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_32.configure(textvariable=test_support.combobox)
        self.TCombobox1_32a.configure(takefocus="")
        self.TCombobox1_32b = ttk.Combobox(top)
        self.TCombobox1_32b['values'] = emotion_options
        self.TCombobox1_32b.place(relx=0.717+0.075+0.075, rely=0.733, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_32.configure(textvariable=test_support.combobox)
        self.TCombobox1_32b.configure(takefocus="")

        self.TCombobox1_33 = ttk.Combobox(top)
        self.TCombobox1_33['values'] = emotion_options
        self.TCombobox1_33.place(relx=0.717, rely=0.822, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_33.configure(textvariable=test_support.combobox)
        self.TCombobox1_33.configure(takefocus="")
        self.TCombobox1_33a = ttk.Combobox(top)
        self.TCombobox1_33a['values'] = emotion_options
        self.TCombobox1_33a.place(relx=0.717+0.075, rely=0.822, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_33.configure(textvariable=test_support.combobox)
        self.TCombobox1_33a.configure(takefocus="")
        self.TCombobox1_33b = ttk.Combobox(top)
        self.TCombobox1_33b['values'] = emotion_options
        self.TCombobox1_33b.place(relx=0.717+0.075+0.075, rely=0.822, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_33.configure(textvariable=test_support.combobox)
        self.TCombobox1_33b.configure(takefocus="")

        self.TCombobox1_34 = ttk.Combobox(top)
        self.TCombobox1_34['values'] = emotion_options
        self.TCombobox1_34.place(relx=0.717, rely=0.889, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_34.configure(textvariable=test_support.combobox)
        self.TCombobox1_34.configure(takefocus="")
        self.TCombobox1_34a = ttk.Combobox(top)
        self.TCombobox1_34a['values'] = emotion_options
        self.TCombobox1_34a.place(relx=0.717+0.075, rely=0.889, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_34.configure(textvariable=test_support.combobox)
        self.TCombobox1_34a.configure(takefocus="")
        self.TCombobox1_34b = ttk.Combobox(top)
        self.TCombobox1_34b['values'] = emotion_options
        self.TCombobox1_34b.place(relx=0.717+0.075+0.075, rely=0.889, relheight=0.047
                , relwidth=0.075)
        #self.TCombobox1_34.configure(textvariable=test_support.combobox)
        self.TCombobox1_34b.configure(takefocus="")

        self.Button2 = tk.Button(top)
        self.Button2.place(relx=0.467, rely=0.956, height=24, width=47)
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Finish''')
        self.Button2.configure(command = self.recordList)
        #self.Button2.bind("<<ButtonSelected>>", self.recordList)

if __name__ == '__main__':
    vp_start_gui()
  

